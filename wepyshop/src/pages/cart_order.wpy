<style lang="less">
// 2.0 这里写样式
page {
  background-color: #fff;
}
.divider {
  background-color: #f4f4f4;
}
.address {
  &-info {
    height: 222rpx;
    padding-bottom: 15rpx;
    box-sizing: border-box;
    position: relative;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    align-content: center;
    justify-content: center;
    .item {
      padding: 22rpx 16rpx;
      display: flex;
      flex-wrap: wrap;
      font-size: 32rpx;
      line-height: 1.3;
      .col {
        display: flex;
        align-items: center;
      }
      .note {
        width: 160rpx;
      }
      .detail {
        max-width: 480rpx;
      }
      .address-phone {
        margin-right: 82rpx;
      }
      .icon-jiantouyou {
        position: absolute;
        right: 0;
      }
      .icon-jiantouyou:before {
        font-size: 24rpx;
        color: #999;
        line-height: 1;
        width: 15rpx;
        height: 25rpx;
      }
    }
  }
  &-border {
    width: 750rpx;
    height: 15rpx;
    position: absolute;
    bottom: 0;
    left: 0;
  }
  &-add {
    height: 222rpx;
    &-btn {
      width: 360rpx;
      height: 80rpx;
      background-color: #f4f4f4;
      border-radius: 5rpx;
      color: #ccc;
      font-size: 32rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

.product {
  &-item {
    display: flex;
    padding: 30rpx 20rpx;
    position: relative;
    &::after {
      content: '';
      position: absolute;
      left: 20rpx;
      right: 0;
      bottom: 0;
      border-bottom: 1rpx solid #ddd;
    }
  }
  &-left {
    margin-right: 26rpx;
    &,
    .product-img {
      width: 200rpx;
      height: 200rpx;
      background-color: #eee;
    }
  }
  &-right {
    width: 480rpx;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
  }
  &-name {
    height: 84rpx;
    font-size: 30rpx;
    line-height: 1.4;
    /* 多行文字隐藏省略号 */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  &-price {
    color: #ff2d4a;
    &-symbol,
    &-decimal {
      font-size: 28rpx;
    }
    &-integer {
      font-size: 44rpx;
    }
  }
  &-count {
    position: absolute;
    right: 0;
    bottom: 0;
    letter-spacing: 2rpx;
    color: #999;
  }
}

.order {
  &-list {
    background-color: #fff;
  }
  &-total-item {
    height: 60rpx;
    background-color: #fff;
    padding: 0 20rpx;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    &-right {
      color: #ff2d4a;
    }
  }
  &-cell {
    height: 88rpx;
    background-color: #fff;
    padding: 0 20rpx;
    display: flex;
    align-items: center;
    position: relative;
    justify-content: space-between;
    &::after {
      content: '';
      position: absolute;
      border-top: 1rpx solid #ddd;
      left: 20rpx;
      right: 20rpx;
      top: -1rpx;
    }
    .btn-line {
      border: 2rpx solid #999;
      border-radius: 5rpx;
      width: 156rpx;
      height: 56rpx;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-left: 40rpx;
    }
    .btn-color-main {
      color: #ff2d4a;
    }
  }
  &-pay {
    background-color: #fff;
    padding: 20rpx 20rpx 60rpx;
    font-size: 30rpx;
    text-align: right;
    &-head {
      margin-bottom: 20rpx;
    }
    &-total {
      color: #ff2d4a;
    }
    &-btn,
    .login-btn {
      background-color: #00c000;
      display: flex;
      height: 80rpx;
      justify-content: center;
      align-items: center;
      color: #fff;
      font-size: 30rpx;
      border-radius: 5rpx;
      margin-bottom: 20rpx;
      &.disabled {
        background-color: #ddd;
      }
    }
  }
}
</style>
<template>
<!--使用地址组件 配合twoWay:true实现子传父,添加.sync后也能实现父传子-->
  <Address :userAddress.sync="addressPage">
    <view class="address-info">
      <block wx:if="{{ addressPage }}">
        <view class="item space-between">
          <view class="col">
            <text class="note">收货人：</text>
            <text class="detail">{{addressPage.userName}}</text>
          </view>
          <view class="col">
            <text class="address-phone">{{addressPage.telNumber}}</text>
            <view class="iconfont-tap icon-jiantouyou"></view>
          </view>
        </view>
        <view class="item">
          <text class="note">收货地址：</text>
          <text class="detail">{{addressPage.userAddressMerge}}</text>
        </view>
      </block>
      <block wx:else>
        <view class="address-add-btn">+ 新增地址</view>
      </block>
      <image class="address-border" src="/images/cart_border@2x.png" alt="" />
    </view>
  </Address>
  <!-- 1.0 这里写结构 -->
  <view class="divider"></view>
  <view class="order-list">
    <block wx:for="{{cartDataArr}}" wx:key="index" wx:if="{{item.selectStatus}}">
      <view class="product-item">
        <navigator url="/pages/goods_detail?goods_id={{ item.goods_id }}" class="product-left">
          <image class="product-img image-holder" src="{{item.goods_small_logo}}" />
        </navigator>
        <view class="product-right">
          <navigator url="/pages/goods_detail?goods_id={{ item.goods_id }}" class="product-name">
            {{item.goods_name}}
          </navigator>
          <view class="product-price">
            <text class="product-price-symbol">￥</text>
            <text class="product-price-integer">{{item.goods_price}}</text>
            <text class="product-price-decimal">.00</text>
          </view>
          <view class="product-count">x2</view>
        </view>
      </view>
    </block>
    <view class="order-cell">
      项目测试使用，支付成功后我们不会为您发货
    </view>
  </view>
  <view class="divider"></view>
  <view class="order-total">
    <view class="order-total-item">
      <view class="order-total-item-left">商品金额</view>
      <view class="order-total-item-right">￥0.01</view>
    </view>
    <view class="order-total-item">
      <view class="order-total-item-left">运费</view>
      <view class="order-total-item-right">+￥{{totalPrice}}</view>
    </view>
  </view>
  <view class="order-pay">
    <view class="order-pay-head">实付金额：<text class="order-pay-total">￥0.01</text></view>
    <block wx:if="{{23}}">
      <button open-type="getUserInfo" @getuserinfo="getUserInfoHandle" class="login-btn">点击登录后下单</button>
    </block>
    <block wx:else>
      <view class="order-pay-btn" @tap="orderPayHandle">微信支付</view>
    </block>
  </view>

</template>

<script>
// 3.0 这里写JS
import wepy from 'wepy'
// 导入收货地址组件
import Address from '../component/address'
// 导入api
import api from '../api/api'
// 类名首字母大写
export default class CartOrder extends wepy.page {
  // 4.0 这里写JSON配置项
  config = {
    navigationBarTitleText: '确认订单',
    backgroundColor: '#fff'
  }
  data = {
    addressPage: null, // 定义父组件的地址,然后子组件传值过来
    cartDataArr: [],
    totalPrice: 0,
    token: ''
  }
  computed = {
    cartDataArr() {
      this.totalPrice = 0
      this.cartDataArr.forEach(item => {
        if (item.selectStatus === true) {
          this.totalPrice += item.goods_number * item.goods_price
        }
      })
      return this.cartDataArr
    }
  }
  components = {
    Address
  }
  methods = {
    // 通过事件对象获取用户信息
    getUserInfoHandle(event) {
      console.log('点击登录后下单', event)
      // 为了多页面数据共享,把登录信息存在本地中
      wepy.setStorageSync('userInfo', event.detail.userInfo)
      // 根据接口所需数据,还需通过wepy.login()获取code
      wepy.login().then(res => {
        let options = {
          encryptedData: event.detail.encryptedData,
          iv: event.detail.iv,
          rawData: event.detail.rawData,
          signature: event.detail.signature,
          code: res.code
        }
        // console.log(options)
        this.doWxLogin(options)
      })
    },
    // 微信支付按钮事件 发送数据到后台进行二次校验
    orderPayHandle() {
      console.log('微信支付')
      if (!this.addressPage) {
        wepy.showToast({
          title: '请选择收货地址',
          icon: 'none',
          duration: 1000
        })
      } else {
        // 将选中状态的商品数据
        let orderSelectArr = []
        this.cartDataArr.forEach(item => {
          if (item.selectStatus) {
            orderSelectArr.push(item)
            // console.log('选中状态的商品', orderSelectArr)
          }
        })
        // 收集选中状态的商品数据
        let goodsServerArr = []
        orderSelectArr.forEach(item => {
          let temObj = {
            goods_price: item.goods_price,
            goods_id: item.goods_id,
            goods_number: item.goods_number
          }
          goodsServerArr.push(temObj)
          // console.log('收集商品', goodsServerArr)
        })
        let options = {
          // 收货地址
          consignee_addr: this.addressPage.userAddressMerge,
          // 商品总金额
          order_price: this.totalPrice,
          // 商品详情, 以json格式字符串传输
          order_detail: JSON.stringify(orderSelectArr),
          // 商品信息
          goods: goodsServerArr
        }
        console.log('收集所有发送后台的数据', options)
        // 调用创建订单函数
        this.doPostMyOrdersCreate(options)
      }
    }
  }
  // 封装创建订单函数
  doPostMyOrdersCreate(options) {
    api
      .postMyOrdersCreate({
        method: 'POST',
        data: options
      })
      .then(res => {
        console.log('创建订单', res)
        if (res.meta.status === 200) {
          let orderNumber = res.data.order_number
          console.log('创建订单', orderNumber)
          // 调用发起订单支付
          this.doPostMyOrdersPay(orderNumber)
        }
      })
  }
  // 发起订单支付
  doPostMyOrdersPay(orderNumber) {
    console.log(orderNumber)
    api
      .postMyOrdersPay({
        method: 'POST',
        data: {
          order_number: orderNumber
        }
      })
      .then(res => {
        if (res.meta.status === 200) {
          let wxOrder = res.data.wxorder
          console.log('222', wxOrder)
          // 使用微信支付接口, 需要传入对象,在res.data.wxorder中
          wepy.requestPayment(wxOrder).then(res => {
            console.log('使用微信支付接口', res)
            // 支付成功后,后台校验,校验成功返回结果
            api.postMyOrdersChkOrder({
              method: 'POST',
              data: {
                order_number: orderNumber
              }
            }).then(res => {
              console.log('后台成功校验支付', res)
              // 支付成功后跳转到订单页面
              wepy.navigateTo({url: '/pages/orders'})
            })
          })
        }
      })
  }
  // 封装获取微信登录token的函数
  doWxLogin(options) {
    api
      .postUsersWxLogin({
        method: 'POST',
        data: options
      })
      .then(res => {
        console.log('token', res)
        if (res.meta.status === 200) {
          // 将token存到本地
          wepy.setStorageSync('token', res.data.token)
          // 把token添加到data中
          this.token = res.data.token
          this.$apply()
        }
      })
  }
  onLoad() {
  }
  // 当切换到本页面时货物购物车商品
  onShow() {
    this.cartDataArr = wepy.getStorageSync('cartDataArr')
    // 打开页面时获取本地存储的token
    this.token = wepy.getStorageSync('token')
  }
}
</script>
